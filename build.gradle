plugins {
    id 'java-library'
    id 'maven-publish'
    id "com.github.ben-manes.versions" version "0.27.0"
    id 'jacoco'
    id "me.champeau.gradle.jmh" version "0.5.0"
}

targetCompatibility = '1.8'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}

test {
    useTestNG()
    jacoco {
        enabled = true
    }
}

jacocoTestReport {
    dependsOn test
}

dependencies {
    testImplementation 'org.assertj:assertj-core:3.15.0'
    testImplementation 'org.slf4j:slf4j-simple:1.7.26'
    testImplementation 'org.testng:testng:7.1.0'

    jmh 'com.google.code.gson:gson:2.8.6'
    jmh 'com.googlecode.json-simple:json-simple:1.1.1'
    jmh 'org.json:json:20190722'
    jmh 'com.eclipsesource.minimal-json:minimal-json:0.9.5'
}

tasks.getByName('jmhJar').doFirst() { duplicatesStrategy(DuplicatesStrategy.EXCLUDE) }
jmh {
    duplicateClassesStrategy = 'exclude'
    resultFormat = 'JSON'
    benchmarkMode = ["avgt", "sample", "ss"]
//    benchmarkMode = ["ss"]
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

publishing {
    publications {
        maven(MavenPublication) {
            group 'moe.orangelabs'
            artifactId 'json'
            version System.getenv("GITHUB_REF") == null ?
                    new Date().getTime() + '-SNAPSHOT' :
                    System.getenv("GITHUB_REF").split("/").last()

            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }

    repositories {
        maven {
            System.setProperty("org.gradle.s3.endpoint", "https://maven.orangelabs.moe.storage.yandexcloud.net/")
            def releasesRepoUrl = "s3://releases"
            def snapshotsRepoUrl = "s3://snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials(AwsCredentials) {
                accessKey System.getenv("AWS_ACCESS_KEY_ID")
                secretKey System.getenv("AWS_SECRET_ACCESS_KEY")
            }
        }
    }
}

tasks.withType(PublishToMavenRepository) { it.dependsOn test }

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
