import java.time.ZoneOffset
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

plugins {
    id 'java-library'
    id 'maven-publish'
    id "com.github.ben-manes.versions" version "0.27.0"
    id 'jacoco'
    id "me.champeau.gradle.jmh" version "0.5.0"
}

group 'moe.orangelabs'
version System.getenv("GITHUB_REF") != null && System.getenv("GITHUB_REF").startsWith("refs/tags/")
        ? System.getenv("GITHUB_REF").split("/").last()
        : ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ofPattern("YYYY.MM.dd.HH.mm.ss")) + "-UNSTABLE"

targetCompatibility = '1.8'
sourceCompatibility = '1.8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

test {
    useTestNG()
    jacoco {
        enabled = true
    }
    testLogging {
        exceptionFormat = 'full'
    }
}

jacocoTestReport {
    dependsOn test
}

dependencies {
    testImplementation 'org.assertj:assertj-core:3.15.0'
    testImplementation 'org.slf4j:slf4j-simple:1.7.26'
    testImplementation 'org.testng:testng:7.1.0'

    jmh 'com.google.code.gson:gson:2.8.6'
    jmh 'com.googlecode.json-simple:json-simple:1.1.1'
    jmh 'org.json:json:20190722'
    jmh 'com.eclipsesource.minimal-json:minimal-json:0.9.5'
}

tasks.getByName('jmhJar').doFirst() { duplicatesStrategy(DuplicatesStrategy.EXCLUDE) }
jmh {
    duplicateClassesStrategy = 'exclude'
    resultFormat = 'JSON'
    benchmarkMode = ["avgt", "sample", "ss"]
//    benchmarkMode = ["ss"]
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}


publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/orangelabsmoe/json")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
}

tasks.withType(PublishToMavenRepository) { it.dependsOn test }

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
